/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TouristIDRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminUpdate"
      | "getLatest"
      | "owner"
      | "register"
      | "registerFor"
      | "renounceOwnership"
      | "transferOwnership"
      | "update"
      | "updateFor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnchorRegistered"
      | "AnchorUpdated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adminUpdate",
    values: [AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFor",
    values: [AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFor",
    values: [AddressLike, BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLatest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFor", data: BytesLike): Result;
}

export namespace AnchorRegisteredEvent {
  export type InputTuple = [
    subject: AddressLike,
    anchorHash: BytesLike,
    didUri: string,
    timestamp: BigNumberish,
    version: BigNumberish
  ];
  export type OutputTuple = [
    subject: string,
    anchorHash: string,
    didUri: string,
    timestamp: bigint,
    version: bigint
  ];
  export interface OutputObject {
    subject: string;
    anchorHash: string;
    didUri: string;
    timestamp: bigint;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AnchorUpdatedEvent {
  export type InputTuple = [
    subject: AddressLike,
    anchorHash: BytesLike,
    didUri: string,
    timestamp: BigNumberish,
    version: BigNumberish
  ];
  export type OutputTuple = [
    subject: string,
    anchorHash: string,
    didUri: string,
    timestamp: bigint,
    version: bigint
  ];
  export interface OutputObject {
    subject: string;
    anchorHash: string;
    didUri: string;
    timestamp: bigint;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TouristIDRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): TouristIDRegistry;
  waitForDeployment(): Promise<this>;

  interface: TouristIDRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminUpdate: TypedContractMethod<
    [subject: AddressLike, newAnchorHash: BytesLike, newDidUri: string],
    [void],
    "nonpayable"
  >;

  getLatest: TypedContractMethod<
    [subject: AddressLike],
    [
      [string, string, bigint, bigint] & {
        anchorHash: string;
        didUri: string;
        updatedAt: bigint;
        version: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  register: TypedContractMethod<
    [anchorHash: BytesLike, didUri: string],
    [void],
    "nonpayable"
  >;

  registerFor: TypedContractMethod<
    [subject: AddressLike, anchorHash: BytesLike, didUri: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  update: TypedContractMethod<
    [newAnchorHash: BytesLike, newDidUri: string],
    [void],
    "nonpayable"
  >;

  updateFor: TypedContractMethod<
    [subject: AddressLike, newAnchorHash: BytesLike, newDidUri: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminUpdate"
  ): TypedContractMethod<
    [subject: AddressLike, newAnchorHash: BytesLike, newDidUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLatest"
  ): TypedContractMethod<
    [subject: AddressLike],
    [
      [string, string, bigint, bigint] & {
        anchorHash: string;
        didUri: string;
        updatedAt: bigint;
        version: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [anchorHash: BytesLike, didUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerFor"
  ): TypedContractMethod<
    [subject: AddressLike, anchorHash: BytesLike, didUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<
    [newAnchorHash: BytesLike, newDidUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFor"
  ): TypedContractMethod<
    [subject: AddressLike, newAnchorHash: BytesLike, newDidUri: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AnchorRegistered"
  ): TypedContractEvent<
    AnchorRegisteredEvent.InputTuple,
    AnchorRegisteredEvent.OutputTuple,
    AnchorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "AnchorUpdated"
  ): TypedContractEvent<
    AnchorUpdatedEvent.InputTuple,
    AnchorUpdatedEvent.OutputTuple,
    AnchorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AnchorRegistered(address,bytes32,string,uint64,uint32)": TypedContractEvent<
      AnchorRegisteredEvent.InputTuple,
      AnchorRegisteredEvent.OutputTuple,
      AnchorRegisteredEvent.OutputObject
    >;
    AnchorRegistered: TypedContractEvent<
      AnchorRegisteredEvent.InputTuple,
      AnchorRegisteredEvent.OutputTuple,
      AnchorRegisteredEvent.OutputObject
    >;

    "AnchorUpdated(address,bytes32,string,uint64,uint32)": TypedContractEvent<
      AnchorUpdatedEvent.InputTuple,
      AnchorUpdatedEvent.OutputTuple,
      AnchorUpdatedEvent.OutputObject
    >;
    AnchorUpdated: TypedContractEvent<
      AnchorUpdatedEvent.InputTuple,
      AnchorUpdatedEvent.OutputTuple,
      AnchorUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
